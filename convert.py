import sys
import json
import requests
import datetime 


addresses = {}


r = requests.get( "https://i2cdevices.org/devices.json" )
if r.status_code == 200:
    print( "Get Data from 'https://i2cdevices.org'"  )
    devices = json.loads( r.content )

else:
    print( "Load loacal data" )
    with open( 'devices.json', 'r' ) as stream:
        devices = json.load( stream )

# print( json.dumps( devices, indent= 4 ) )

for device in devices: 
    part = device[ "part_number" ]
    for addr  in device[ "addresses" ]:
        addresses.setdefault( addr, [] ).append( part )


def write_output( output ):
    print( """/*
* This file is automatically generated from https://i2cdevices.org/
*
* Generated {}
*
* It's intended to be used by the Arduino diagnostic tool at
* https://github.com/pe2mbs/Arduino-Diagnostic-Tool
*
* To update the known device list in the diagnostic tool,
* generate a new version of this file, copy it to the src
* directory and rebuild the tool.
*
* The MIT License (MIT)
* Copyright © 2025 Marc Bertens-Nguyen <m.bertens@pe2mbs.nl>
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the “Software”), to deal in the Software without
* restriction, including without limitation the rights to use, copy,
* modify, merge, publish, distribute, sublicense, and/or sell copies
* of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions: The above
* copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
#include <avr/pgmspace.h>


const char device_reserved[] PROGMEM = "Reserved";

""".format( datetime.datetime.now().strftime( "%Y-%m-%d %H:%M:%S" ) ), file = output )

    for addr, values in sorted( addresses.items() ):
        print( f"const char device_{addr:02x}[] PROGMEM = \"{ ','.join( values ) }\";", file = output )


    print( """



typedef struct
{
    uint8_t     id;
    const char* devices;    
} I2C_DEVICE;

const I2C_DEVICE I2CTable[] PROGMEM = {""", file = output )
    for addr in range( 0x0C ):
        print( f"    {{ 0x{addr:02X},  device_reserved }},", file = output ) 

    for addr, values in sorted( addresses.items() ):
        print( f"    {{ 0x{addr:02X},  device_{addr:02x} }},", file = output ) 


    print( """};
""", file = output )


with open( "i2cdevices.cpp", "w", ) as stream:
    write_output( stream )



