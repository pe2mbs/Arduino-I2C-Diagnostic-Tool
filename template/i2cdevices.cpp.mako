/*
* This file is automatically generated from https://i2cdevices.org/
*
* Generated ${ generate_timestamp }
*
* It's intended to be used by the Arduino diagnostic tool at
* https://github.com/pe2mbs/Arduino-Diagnostic-Tool
*
* To update the known device list in the diagnostic tool,
* generate a new version of this file, copy it to the src
* directory and rebuild the tool.
*
* The MIT License (MIT)
* Copyright © 2025 Marc Bertens-Nguyen <m.bertens@pe2mbs.nl>
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the “Software”), to deal in the Software without
* restriction, including without limitation the rights to use, copy,
* modify, merge, publish, distribute, sublicense, and/or sell copies
* of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions: The above
* copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
#include "i2cdevices.hpp"


const char device_reserved[] PROGMEM = "Reserved";


%for addr, values in sorted( devices.items() ):
const char device_${ f"{addr:02x}" }[] PROGMEM = "${ ','.join( values ) }";
%endfor


const I2C_DEVICE I2C_devices::I2CTable[ 128 ] = {
%for addr in range( reserved_devices ):
    { 0x${ f"{addr:02x}" }, device_reserved },
%endfor    
%for addr, value in sorted( devices.items() ):
    { 0x${ f"{addr:02x}" }, device_${ f"{addr:02x}" } },
%endfor
};


I2C_devices::I2C_devices()
{
    this->buffer = NULL;
    return;
}


const char* I2C_devices::getLabel( int address )
{
    memcpy_P( &device, &this->I2CTable[ address ], sizeof ( I2C_DEVICE ) );
    int len = strlen_P( device.devices );
    if ( this->buffer )
    {
        delete [] this->buffer;
    }
    this->buffer = new char[ len + 1 ];
    strcpy_P( this->buffer, device.devices );
    return ( this->buffer );
}


void I2C_devices::banner()
{
    printf( "I2C Scanner version %s, Copyright (C) 2025 Marc Bertens-Nguyen\n", __version__ );
    printf( "I2C Scanner comes with ABSOLUTELY NO WARRANTY\n" );
    printf( "This is free software, and you are welcome to redistribute it\n" );
    printf( "under certain conditions; see LICENCE.md for details.\n\n" );
    return;
}


void I2C_devices::scan( void )
{
    int nDevices = 0;
    printf( "Scanning...\n" );
    for ( byte address = 1; address < 127; ++address ) 
    {
        // The i2c_scanner uses the return value of the Wire.endTransmission to see if
        // a device did acknowledge to the address.
        Wire.beginTransmission( address );
        byte error = Wire.endTransmission();
        if ( error == 0 ) 
        {
            printf( "I2C device found at address 0x%02x - %s\n", address, this->getLabel( address ) );
            ++nDevices;
        } 
        else if ( error == 4 )  
        {
            printf( "Unknown error at address 0x%02x !\n", address );
        }
    }
    if ( nDevices == 0 ) 
    {
        printf( "No I2C devices found\n\n" );
    } 
    else 
    {

        printf( "%i devices found\n\n", nDevices );
    }
    delay( 5000 ); // Wait 5 seconds for next scan
}
